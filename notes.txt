parser.add_argument('--gpu', type=str, default="1")
    parser.add_argument('--model', type=str, default='simplecnn', help='neural network used in training')
    parser.add_argument('--dataset', type=str, default='cifar10', help='dataset used for training')
    parser.add_argument('--partition', type=str, default='noniid-skew', help='the data partitioning strategy')
    parser.add_argument('--num_local_iterations', type=int, default=400, help='number of local iterations')
    parser.add_argument('--batch_size', type=int, default=64, help='input batch size for training (default: 64)')
    parser.add_argument('--lr', type=float, default=0.01, help='learning rate (default: 0.1)')
    parser.add_argument('--epochs', type=int, default=10, help='number of local epochs')
    parser.add_argument('--n_parties', type=int, default=10, help='number of workers in a distributed cluster')
    parser.add_argument('--comm_round', type=int, default=50, help='number of maximum communication roun')


    parser.add_argument('--reg', type=float, default=1e-5, help="L2 regularization strength")
    parser.add_argument('--log_file_name', type=str, default=None, help='The log file name')
    parser.add_argument('--optimizer', type=str, default='sgd', help='the optimizer')


for pfedgraph_cosine-

python pfedgraph_cosine.py --gpu "7" --dataset 'cifar10' # 'mnist', 'cifar10', 'svhn', 'fmnist', 'yahoo_answers' --model 'simplecnn' --partition 'noniid-skew' --n_parties 10 --num_local_iterations 200 --lr 0.01 --epochs 10 --comm_round 50 --reg 1e-5 --log_file_name 'logs' --optimizer 'sgd'